name: Ya-Build-and-Test
inputs:
  build_target:
    type: string
    default: "ydb/"
    description: "limit build and test to specific target"
  build_preset:
    type: string
  run_build:
    type: boolean
    default: true
    description: "run build"
  run_tests:
    type: boolean
    default: true
    description: "run tests"
  run_tests_if_build_fails:
    default: "true"
    description: "run tests if build fails"
  test_threads:
    type: string
    default: 28
    description: "Test threads count"
  link_threads:
    type: string
    default: 8
    description: "link threads count"
  test_size:
    type: string
    default: "small,medium,large"
  test_type:
    type: string
    default: ""
    description: "run only specific test types (or all by default)"
  increment:
    type: boolean
    required: true
    description: If true, compares build graphs between the current and previous commits to find a list of test suites to run. Otherwise, runs all tests.
  folder_prefix:
    type: string
    default: "ya-"
  put_build_results_to_cache:
    type: boolean
    default: true
  additional_ya_make_args:
    type: string
    default: ""
  secs:
    type: string
    default: ""
  vars:
    type: string
    default: ""
defaults:
  run:
    shell: bash
runs:
  using: "composite"
  steps:
    - name: comment-build-start
      if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'
      shell: bash
      env:
        BUILD_PRESET: ${{ inputs.build_preset }}
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        jobs_url="https://api.github.com/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/jobs"
        # tricky: we are searching job with name that contains build_preset
        check_url=$(curl -s $jobs_url | jq --arg n "$BUILD_PRESET" -r '.jobs[] | select(.name | contains($n)) | .html_url')
        
        echo "Pre-commit [check]($check_url) for $(git rev-parse HEAD) has started." | .github/scripts/tests/comment-pr.py --rewrite

        curl -L -X POST -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{github.token}}" -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{github.repository}}/statuses/${{github.event.pull_request.head.sha}} \
          -d '{"state":"pending","description":"The check has been started","context":"build_${{inputs.build_preset}}"}'

        if [[ "${{inputs.run_tests}}" == "true" ]];then
          curl -L -X POST -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{github.token}}" -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{github.repository}}/statuses/${{github.event.pull_request.head.sha}} \
            -d '{"state":"pending","description":"The check has been started","context":"test_${{inputs.build_preset}}"}'
        fi
   
    - name: Prepare s3cmd
      uses: ./.github/actions/s3cmd
      with:
        s3_bucket: ${{ fromJSON( inputs.vars ).AWS_BUCKET }}
        s3_endpoint: ${{ fromJSON( inputs.vars ).AWS_ENDPOINT }}
        s3_key_id: ${{ fromJSON( inputs.secs ).AWS_KEY_ID }}
        s3_key_secret: ${{ fromJSON( inputs.secs ).AWS_KEY_VALUE }}
        folder_prefix: ya-
        build_preset: ${{ inputs.build_preset }}

    - name: Generate ya.make with affected test suites and modules list
      if: inputs.increment == 'true'
      uses: ./.github/actions/graph_compare
 
    - name: Change target in case of incremental (tests)
      id: test_run_choice
      shell: bash
      run: |
        if [ "${{ inputs.increment }}" == "true" ]; then
          echo "target=." >> $GITHUB_OUTPUT
        else
          echo "target=${{ inputs.build_target }}" >> $GITHUB_OUTPUT
        fi

    - name: Build
      uses: ./.github/actions/build_ya
      id: build
      if: ${{ inputs.run_build == 'true' }}
      with:
        build_target: ${{ inputs.build_target }}
        build_preset: ${{ inputs.build_preset }}
        bazel_remote_uri: ${{  fromJSON( inputs.vars ).REMOTE_CACHE_URL || '' }}
        bazel_remote_username: ${{ fromJSON( inputs.secs ).REMOTE_CACHE_USERNAME || '' }}
        bazel_remote_password: ${{ fromJSON( inputs.secs ).REMOTE_CACHE_PASSWORD || '' }}
        put_build_results_to_cache: ${{ inputs.put_build_results_to_cache }}
        link_threads: ${{ inputs.link_threads }}
        additional_ya_make_args: ${{ inputs.additional_ya_make_args }}

    - name: Run tests
      uses: ./.github/actions/test_ya
      if: ${{ inputs.run_tests == 'true' &&  (steps.build.outputs.success == 'true' || inputs.run_tests_if_build_fails == 'true') }}
      with:
        build_target: ${{ steps.test_run_choice.outputs.target }}
        build_preset: ${{ inputs.build_preset }}
        test_size: ${{ inputs.test_size }}
        test_type: ${{ inputs.test_type }}
        testman_token: ${{ fromJSON( inputs.secs ).TESTMO_TOKEN }}
        testman_url: ${{  fromJSON( inputs.vars ).TESTMO_URL }}
        testman_project_id: ${{  fromJSON( inputs.vars ).TESTMO_PROJECT_ID }}
        link_threads: ${{ inputs.link_threads }}
        additional_ya_make_args: ${{ inputs.additional_ya_make_args }}
        test_threads: ${{ inputs.test_threads }}

    
    - name: Notify about failed build
      if: ${{ steps.build.outputs.success != 'true' && inputs.run_tests == 'true' && inputs.run_tests_if_build_fails == 'false' }}
      shell: bash
      run: |
        echo 'Build failed. See the [build log](${{ steps.build.outputs.log_url }}).' >> $GITHUB_STEP_SUMMARY
        
        if [[ "$GITHUB_EVENT_NAME" =~ ^pull_request ]]; then
          echo "Tests run skipped." | .github/scripts/tests/comment-pr.py --fail
        fi
        
        exit 1
        
    - name: build_stats
      shell: bash
      continue-on-error: true
      if: always()
      run: |
        set -x
        export build_preset="${{ inputs.build_preset }}" 
        python3 -m pip install ydb ydb[yc]
        python3 .github/scripts/send_build_stats.py

    - name: show_build_size_diff
      shell: bash
      continue-on-error: true
      run: |
        set -x
        export build_preset="${{ inputs.build_preset }}" 
        python3 -m pip install ydb ydb[yc]

        main_size_script=.github/scripts/get_main_build_size.py
        current_size_script=.github/scripts/get_current_build_size.py 
        
        main_size_result_raw=`$main_size_script`
        current_size_result_raw=`$current_size_script`

        orange_treshold=102400
        red_treshold=2097152

        IFS=':'
        read -ra main_sizes_result <<< "$main_size_result_raw"
        read -ra current_sizes_result <<< "$current_size_result_raw"

        bytesToHumanIEC() {
            b=${1:-0}; d=''; s=0; S=(Bytes {K,M,G,T,E,P,Z,Y}iB)
            while ((b > 1024)); do
                d="$(printf ".%02d" $((b % 1024 * 100 / 1024)))"
                b=$((b / 1024))
                let s++
            done
            echo "$b$d ${S[$s]}"
        }
        format_number() {
          echo "$1" | rev | sed 's/\(...\)/\1 /g' | rev | xargs
        }

        if [[ ${main_sizes_result[0]} == "sizes" && ${current_sizes_result[0]} == "sizes" ]]; then

          main_github_sha=${main_sizes_result[1]} 
          main_git_commit_time=${main_sizes_result[2]} 
          main_size_bytes=${main_sizes_result[3]} 
          main_size_stripped_bytes=${main_sizes_result[4]} 

          current_size_bytes=${current_sizes_result[1]}
          current_size_stripped_bytes=${current_sizes_result[2]}
          current_pr_commit_sha=${{github.event.pull_request.head.sha}}

          bytes_diff=$((current_size_bytes-main_size_bytes))
          diff_perc=$(echo "scale=3; $bytes_diff*100/$main_size_bytes" | bc | sed -r 's/^(-?)\./\10./')

          main_url="https://github.com/ydb-platform/ydb/commit/"$main_github_sha
          current_url="https://github.com/ydb-platform/ydb/commit/"$current_pr_commit_sha

          human_readable_size=`bytesToHumanIEC $current_size_bytes`
          human_readable_size_diff=`bytesToHumanIEC $bytes_diff`

          if [ "$bytes_diff" -ge "0" ]; then
            sign="+"
            if [ "$bytes_diff" -ge "$red_treshold" ]; then
              color="red"
            elif ["$bytes_diff" -ge "$orange_treshold" ]; then
              color="yellow"
            else
              color="green"
            fi
          else
            sign=""
            color="green"
          fi

          comment="[Current:${current_pr_commit_sha}]($current_url) ydbd size $human_readable_size **$sign$human_readable_size_diff $diff_perc %%**  vs build [main:${main_github_sha:0:8}]($main_url)

        <details><summary>YDBD build size details</summary><p>

        [main:${main_github_sha:0:8}]($main_url) ydbd build size:
          - binary size **$(format_number $main_size_bytes)** Bytes 
          - stripped binary size **$(format_number $main_size_stripped_bytes)** Bytes

        [current:${current_pr_commit_sha:0:8}]($current_url) ydbd build size:
          - binary size **$(format_number $current_size_bytes)** Bytes 
          - stripped binary size **$(format_number $current_size_stripped_bytes)** Bytes

        [ydbd size dashboard](https://datalens.yandex/cu6hzmpaki700)  

        </p></details>"
        
          printf "$comment" | .github/scripts/tests/comment-pr.py --color $color
        
        else
          echo "Skipped build size difference"
        fi

    - name: comment-if-cancel
      shell: bash
      if: cancelled() && (github.event_name == 'pull_request' || github.event_name == 'pull_request_target')
      env:
        BUILD_PRESET: ${{ inputs.build_preset }}
        GITHUB_TOKEN: ${{ github.token }}
      run:  echo "Check cancelled" | .github/scripts/tests/comment-pr.py --color black
